<?php
/**
 * ChunkShield Auto Validator Tool
 * 
 * This script automatically validates code generated by ChunkShield.
 * It scans output directories and validates all PHP files.
 */

// Set error reporting
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Load CodeValidator class
require_once __DIR__ . '/CodeValidator.php';

// Define colors for console output
define('COLOR_RED', "\033[31m");
define('COLOR_GREEN', "\033[32m");
define('COLOR_YELLOW', "\033[33m");
define('COLOR_BLUE', "\033[34m");
define('COLOR_MAGENTA', "\033[35m");
define('COLOR_CYAN', "\033[36m");
define('COLOR_WHITE', "\033[37m");
define('COLOR_RESET', "\033[0m");
define('COLOR_BOLD', "\033[1m");

/**
 * Auto Validator class
 */
class AutoValidator {
    private $validator;
    private $baseDir;
    private $outputDirs = [];
    private $validationLevel = 1;
    private $colorize = true;
    private $verboseMode = false;
    private $validFiles = 0;
    private $invalidFiles = 0;
    private $totalFiles = 0;
    private $validationResults = [];
    
    /**
     * Constructor
     * 
     * @param string $baseDir Base directory of ChunkShield
     * @param array $outputDirs Output directories to scan
     * @param int $level Validation level
     * @param bool $colorize Whether to use ANSI color codes
     * @param bool $verbose Whether to output detailed information
     */
    public function __construct($baseDir, $outputDirs = [], $level = 1, $colorize = true, $verbose = false) {
        $this->validator = new CodeValidator();
        $this->baseDir = rtrim($baseDir, '/');
        $this->outputDirs = $outputDirs;
        $this->validationLevel = $level;
        $this->colorize = $colorize;
        $this->verboseMode = $verbose;
        
        // If no output dirs specified, use defaults
        if (empty($this->outputDirs)) {
            $this->outputDirs = [
                'output/obfuscated',
                'output/chunks'
            ];
        }
    }
    
    /**
     * Run validation on all files
     * 
     * @return array Validation results
     */
    public function run() {
        $this->outputHeader();
        
        foreach ($this->outputDirs as $dir) {
            $fullDir = $this->baseDir . '/' . ltrim($dir, '/');
            $this->validateDirectory($fullDir);
        }
        
        $this->outputSummary();
        
        return [
            'valid_files' => $this->validFiles,
            'invalid_files' => $this->invalidFiles,
            'total_files' => $this->totalFiles,
            'validation_results' => $this->validationResults
        ];
    }
    
    /**
     * Validate all PHP files in a directory
     * 
     * @param string $directory Directory to scan
     * @return void
     */
    private function validateDirectory($directory) {
        if (!is_dir($directory)) {
            $this->outputLine("Directory not found: $directory", COLOR_YELLOW);
            return;
        }
        
        $this->outputLine("Scanning directory: $directory", COLOR_CYAN);
        
        // Get all PHP files in the directory and subdirectories
        $files = $this->scanDirectoryForPHPFiles($directory);
        
        if (empty($files)) {
            $this->outputLine("No PHP files found in $directory", COLOR_YELLOW);
            return;
        }
        
        $this->outputLine("Found " . count($files) . " PHP files", COLOR_BLUE);
        
        foreach ($files as $file) {
            $this->validateFile($file);
        }
    }
    
    /**
     * Scan directory for PHP files
     * 
     * @param string $directory Directory to scan
     * @return array Array of PHP file paths
     */
    private function scanDirectoryForPHPFiles($directory) {
        $files = [];
        
        $directory = rtrim($directory, '/');
        $items = new \RecursiveIteratorIterator(
            new \RecursiveDirectoryIterator($directory),
            \RecursiveIteratorIterator::SELF_FIRST
        );
        
        foreach ($items as $item) {
            if ($item->isFile() && $item->getExtension() === 'php') {
                $files[] = $item->getRealPath();
            }
        }
        
        return $files;
    }
    
    /**
     * Validate a single PHP file
     * 
     * @param string $file File path
     * @return bool True if validation passed
     */
    private function validateFile($file) {
        $this->totalFiles++;
        $relativePath = str_replace($this->baseDir . '/', '', $file);
        $this->outputLine("Validating: $relativePath", COLOR_BLUE, false);
        
        $isValid = $this->validator->validateFile($file, $this->validationLevel);
        $results = $this->validator->getResults();
        $this->validationResults[$relativePath] = $results;
        
        if ($isValid) {
            $this->validFiles++;
            $this->outputLine(" - " . $this->colorText("PASSED", COLOR_GREEN), null, true);
        } else {
            $this->invalidFiles++;
            $this->outputLine(" - " . $this->colorText("FAILED", COLOR_RED), null, true);
            
            // Output details in verbose mode
            if ($this->verboseMode) {
                $this->outputLine($this->validator->getFormattedResults($this->colorize));
            } else {
                // Show at least the first error
                if (!empty($results['errors'])) {
                    $this->outputLine("  " . $this->colorText($results['errors'][0], COLOR_RED));
                }
            }
        }
        
        return $isValid;
    }
    
    /**
     * Output script header
     * 
     * @return void
     */
    private function outputHeader() {
        $this->outputLine("", null);
        $this->outputLine($this->colorText("======================================", COLOR_CYAN));
        $this->outputLine($this->colorText("  CHUNKSHIELD CODE AUTO VALIDATOR", COLOR_CYAN . COLOR_BOLD));
        $this->outputLine($this->colorText("======================================", COLOR_CYAN));
        $this->outputLine("Validation Level: " . $this->getValidationLevelName($this->validationLevel));
        $this->outputLine("", null);
    }
    
    /**
     * Output summary of validation results
     * 
     * @return void
     */
    private function outputSummary() {
        $this->outputLine("", null);
        $this->outputLine($this->colorText("======================================", COLOR_CYAN));
        $this->outputLine($this->colorText("  VALIDATION SUMMARY", COLOR_CYAN . COLOR_BOLD));
        $this->outputLine($this->colorText("======================================", COLOR_CYAN));
        $this->outputLine("Total Files: " . $this->totalFiles);
        $this->outputLine("Valid Files: " . $this->colorText($this->validFiles, COLOR_GREEN));
        $this->outputLine("Invalid Files: " . $this->colorText($this->invalidFiles, COLOR_RED));
        
        $percentage = $this->totalFiles > 0 ? round(($this->validFiles / $this->totalFiles) * 100, 2) : 0;
        $color = $percentage >= 90 ? COLOR_GREEN : ($percentage >= 70 ? COLOR_YELLOW : COLOR_RED);
        $this->outputLine("Success Rate: " . $this->colorText("$percentage%", $color));
        $this->outputLine("", null);
    }
    
    /**
     * Get validation level name
     * 
     * @param int $level Validation level
     * @return string Validation level name
     */
    private function getValidationLevelName($level) {
        switch ($level) {
            case 1:
                return "Basic Syntax";
            case 2:
                return "Code Structure";
            case 3:
                return "Security";
            case 4:
                return "Compatibility";
            default:
                return "Unknown";
        }
    }
    
    /**
     * Output a line of text
     * 
     * @param string $text Text to output
     * @param string|null $color Color code
     * @param bool $continueLine Whether to continue the current line
     * @return void
     */
    private function outputLine($text, $color = null, $continueLine = false) {
        if ($color !== null) {
            $text = $this->colorText($text, $color);
        }
        
        if ($continueLine) {
            echo $text . PHP_EOL;
        } else {
            echo $text . PHP_EOL;
        }
        
        // Also log to file if it's set
        if (defined('CHUNKSHIELD_LOG_FILE') && CHUNKSHIELD_LOG_FILE) {
            file_put_contents(
                CHUNKSHIELD_LOG_FILE, 
                strip_tags($text) . PHP_EOL, 
                FILE_APPEND
            );
        }
    }
    
    /**
     * Apply color to text
     * 
     * @param string $text Text to colorize
     * @param string $color Color code
     * @return string Colorized text
     */
    private function colorText($text, $color) {
        if (!$this->colorize || $color === null) {
            return $text;
        }
        
        return $color . $text . COLOR_RESET;
    }
}

// Handle CLI usage
if (php_sapi_name() === 'cli' && isset($argv[0]) && basename($argv[0]) === basename(__FILE__)) {
    // Parse command line arguments
    $options = getopt('d:l:vh', ['dir:', 'level:', 'verbose', 'help', 'no-color']);
    
    if (isset($options['h']) || isset($options['help'])) {
        echo "ChunkShield Auto Validator Tool\n";
        echo "\n";
        echo "Usage: php auto_validator.php [options]\n";
        echo "\n";
        echo "Options:\n";
        echo "  -d, --dir=DIR         Base directory of ChunkShield (default: ..)\n";
        echo "  -l, --level=LEVEL     Validation level (1-4, default: 1)\n";
        echo "  -v, --verbose         Enable verbose output\n";
        echo "      --no-color        Disable colored output\n";
        echo "  -h, --help            Display this help message\n";
        echo "\n";
        echo "Validation Levels:\n";
        echo "  1 - Basic Syntax: Check only for syntax errors\n";
        echo "  2 - Code Structure: Check brackets, quotes, and PHP tags\n";
        echo "  3 - Security: Check for potential security issues\n";
        echo "  4 - Compatibility: Check for PHP version compatibility issues\n";
        exit(0);
    }
    
    $baseDir = isset($options['d']) ? $options['d'] : (isset($options['dir']) ? $options['dir'] : __DIR__ . '/..');
    $level = isset($options['l']) ? (int)$options['l'] : (isset($options['level']) ? (int)$options['level'] : 1);
    $verbose = isset($options['v']) || isset($options['verbose']);
    $noColor = isset($options['no-color']);
    
    // Validate level
    $level = max(1, min(4, $level));
    
    // Run the validator
    $validator = new AutoValidator($baseDir, [], $level, !$noColor, $verbose);
    $results = $validator->run();
    
    // Return error code if any files are invalid
    exit($results['invalid_files'] > 0 ? 1 : 0);
} else {
    // Make the class available for inclusion
}